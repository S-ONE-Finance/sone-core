/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface UniswapV2FactoryContract
  extends Truffle.Contract<UniswapV2FactoryInstance> {
  "new"(
    _feeSetter: string,
    meta?: Truffle.TransactionDetails
  ): Promise<UniswapV2FactoryInstance>;
}

export interface PairCreated {
  name: "PairCreated";
  args: {
    token0: string;
    token1: string;
    pair: string;

    0: string;
    1: string;
    2: string;
    3: BN;
  };
}

type AllEvents = PairCreated;

export interface UniswapV2FactoryInstance extends Truffle.ContractInstance {
  allPairs(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  feeSetter(txDetails?: Truffle.TransactionDetails): Promise<string>;

  feeTo(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getPair(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  migrator(txDetails?: Truffle.TransactionDetails): Promise<string>;

  soneConvert(txDetails?: Truffle.TransactionDetails): Promise<string>;

  swapFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  withdrawFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  withdrawFeeTo(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allPairsLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  pairCodeHash(txDetails?: Truffle.TransactionDetails): Promise<string>;

  createPair: {
    (
      tokenA: string,
      tokenB: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenA: string,
      tokenB: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      tokenA: string,
      tokenB: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenA: string,
      tokenB: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setFeeTo: {
    (_feeTo: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_feeTo: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _feeTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _feeTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setWithdrawFeeTo: {
    (_withdrawFeeTo: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _withdrawFeeTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _withdrawFeeTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _withdrawFeeTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMigrator: {
    (_migrator: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _migrator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _migrator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _migrator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setFeeSetter: {
    (_feeSetter: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _feeSetter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _feeSetter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _feeSetter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSwapFee: {
    (
      _swapFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _swapFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _swapFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _swapFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSoneConvert: {
    (_soneConvert: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _soneConvert: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _soneConvert: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _soneConvert: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    allPairs(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    feeSetter(txDetails?: Truffle.TransactionDetails): Promise<string>;

    feeTo(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getPair(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    migrator(txDetails?: Truffle.TransactionDetails): Promise<string>;

    soneConvert(txDetails?: Truffle.TransactionDetails): Promise<string>;

    swapFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    withdrawFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    withdrawFeeTo(txDetails?: Truffle.TransactionDetails): Promise<string>;

    allPairsLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    pairCodeHash(txDetails?: Truffle.TransactionDetails): Promise<string>;

    createPair: {
      (
        tokenA: string,
        tokenB: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenA: string,
        tokenB: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        tokenA: string,
        tokenB: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenA: string,
        tokenB: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setFeeTo: {
      (_feeTo: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _feeTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _feeTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _feeTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setWithdrawFeeTo: {
      (_withdrawFeeTo: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _withdrawFeeTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _withdrawFeeTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _withdrawFeeTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setMigrator: {
      (_migrator: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _migrator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _migrator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _migrator: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setFeeSetter: {
      (_feeSetter: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _feeSetter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _feeSetter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _feeSetter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setSwapFee: {
      (
        _swapFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _swapFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _swapFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _swapFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setSoneConvert: {
      (_soneConvert: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _soneConvert: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _soneConvert: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _soneConvert: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
