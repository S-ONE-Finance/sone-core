/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface SoneConvertContract
  extends Truffle.Contract<SoneConvertInstance> {
  "new"(
    _sone: string,
    _weth: string,
    _factory: string,
    _soneSwapRouter: string,
    meta?: Truffle.TransactionDetails
  ): Promise<SoneConvertInstance>;
}

type AllEvents = never;

export interface SoneConvertInstance extends Truffle.ContractInstance {
  factory(txDetails?: Truffle.TransactionDetails): Promise<string>;

  sone(txDetails?: Truffle.TransactionDetails): Promise<string>;

  soneSwapRouter(txDetails?: Truffle.TransactionDetails): Promise<string>;

  weth(txDetails?: Truffle.TransactionDetails): Promise<string>;

  convertToSone: {
    (
      token0: string,
      token1: string,
      liquidity: number | BN | string,
      totalSupply: number | BN | string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token0: string,
      token1: string,
      liquidity: number | BN | string,
      totalSupply: number | BN | string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token0: string,
      token1: string,
      liquidity: number | BN | string,
      totalSupply: number | BN | string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token0: string,
      token1: string,
      liquidity: number | BN | string,
      totalSupply: number | BN | string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    factory(txDetails?: Truffle.TransactionDetails): Promise<string>;

    sone(txDetails?: Truffle.TransactionDetails): Promise<string>;

    soneSwapRouter(txDetails?: Truffle.TransactionDetails): Promise<string>;

    weth(txDetails?: Truffle.TransactionDetails): Promise<string>;

    convertToSone: {
      (
        token0: string,
        token1: string,
        liquidity: number | BN | string,
        totalSupply: number | BN | string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token0: string,
        token1: string,
        liquidity: number | BN | string,
        totalSupply: number | BN | string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token0: string,
        token1: string,
        liquidity: number | BN | string,
        totalSupply: number | BN | string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token0: string,
        token1: string,
        liquidity: number | BN | string,
        totalSupply: number | BN | string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
